(function() {
    'use strict';

// A unique ID to avoid duplicates
const newElementId = 'extension-banner';

// URL to your external JSON
const JSON_URL = 'https://raw.githubusercontent.com/apersongithub/Duolingo-Unlimited-Hearts/refs/heads/main/extension-version.json';

// Default fallback JSON
const FALLBACK_CONFIG = {
  "BANNER": `
    <div class="thPiC">
        <img class="_1xOxM" src="https://raw.githubusercontent.com/apersongithub/Duolingo-Unlimited-Hearts/refs/heads/main/extras/icon.svg" style="border-radius: 100px;">
    </div>
    <div class="_3jiBp">
        <h4 class="qyEhl">Duolingo Max Extension</h4>
        <span class="_3S2Xa">
            Created by <a href="https://github.com/apersongithub/Duolingo-Unlimited-Hearts" target="_blank" style="color: #07b3ec;">apersongithub</a>
        </span>
    </div>
    <div class="_36kJA">
        <div style="margin-top:10px;">
            <a href="https://www.buymeacoffee.com/aperson" target="_blank">
                <button class="_2paU5 rdtAy _2V6ug _1ursp _7jW2t _3gQUj">
                    <span class="_9lHjd" style="color: #d7d62b;">‚òï Buy me a coffee</span>
                </button>
            </a>
        </div>
    </div>
  `
};

/**
 * Adds the custom element using BANNER from a config object
 */
function addCustomElement(config, root = document) {
  if (document.getElementById(newElementId)) return;

  const refElement = root.querySelector('.ky51z._26JAQ.MGk8p');
  if (!refElement) return;

  const ul = document.createElement('ul');
  ul.className = 'Y6o36';

  const newLi = document.createElement('li');
  newLi.id = newElementId;
  newLi.className = '_17J_p';
  newLi.innerHTML = config.BANNER;

  ul.appendChild(newLi);
  refElement.parentNode.insertBefore(ul, refElement.nextSibling);

  console.log('Extension banner successfully added!');
}

/**
 * Fetch JSON config from external URL
 */
async function loadConfigAndInject() {
  try {
    const response = await fetch(JSON_URL, { cache: 'no-store' });
    if (!response.ok) throw new Error('Failed to fetch JSON');
    const config = await response.json();
    addCustomElement(config);
  } catch (err) {
    console.warn('Failed to load external JSON, using fallback:', err);
    addCustomElement(FALLBACK_CONFIG);
  }
}

// Run immediately
loadConfigAndInject();

// Observe DOM for dynamically added content
const observer = new MutationObserver(() => loadConfigAndInject());
observer.observe(document.documentElement, { childList: true, subtree: true });
})();

// Wait until the site is fully loaded
window.addEventListener('load', () => {
    // Default values in case fetch fails
    let EXTENSION_NAME = "Duolingo Max Extension";
    let EXTENSION_URL = "https://github.com/apersongithub/Duolingo-Unlimited-Hearts/";

    // Get current extension version from the injected banner
    let CURRENT_VERSION = chrome.runtime.getManifest().version; // fallback

    // Configurable ignore durations for major and minor updates
    const IGNORE_DURATION_MAJOR = {
        hours: 0,
        minutes: 0,
        days: 3,
        weeks: 0
    };
    const IGNORE_DURATION_MINOR = {
        hours: 0,
        minutes: 0,
        days: 0,
        weeks: 1
    };

    // Helper to calculate total milliseconds for ignore duration
    function getIgnoreMs(duration) {
        return (
            ((duration.weeks * 7 * 24 * 60 * 60) +
            (duration.days * 24 * 60 * 60) +
            (duration.hours * 60 * 60) +
            (duration.minutes * 60)) * 1000
        );
    }

    // Check if user ignored the alert in the last configured time
    const ignoreKeyMajor = 'duo_extension_update_ignore_until_major';
    const ignoreKeyMinor = 'duo_extension_update_ignore_until_minor';
    const ignoreUntilMajor = localStorage.getItem(ignoreKeyMajor);
    const ignoreUntilMinor = localStorage.getItem(ignoreKeyMinor);
    const now = Date.now();

    // Fetch latest version from remote JSON and compare versions
    fetch("https://raw.githubusercontent.com/apersongithub/Duolingo-Unlimited-Hearts/refs/heads/main/extension-version.json")
        .then(response => response.json())
        .then(data => {
            const latestVersion = data.version;
            const releaseDate = data.releaseDate; // "2025-08-28"
            const releaseNotes = data.releaseNotes || "";
            EXTENSION_NAME = data.EXTENSION_NAME || EXTENSION_NAME;
            EXTENSION_URL = data.EXTENSION_URL || EXTENSION_URL;

            const currentParts = CURRENT_VERSION.split('.').map(Number);
            const latestParts = latestVersion.split('.').map(Number);

            // Calculate days ago
            const releaseDateObj = new Date(releaseDate);
            const diffTime = Math.abs(now - releaseDateObj);
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

            // Compare versions
            function compareVersions(a, b) {
                for (let i = 0; i < Math.max(a.length, b.length); i++) {
                    const numA = a[i] || 0;
                    const numB = b[i] || 0;
                    if (numA < numB) return -1;
                    if (numA > numB) return 1;
                }
                return 0;
            }

            const cmp = compareVersions(currentParts, latestParts);

            if (cmp < 0) {
                // Major update
                if (currentParts[0] < latestParts[0]) {
                    if (!ignoreUntilMajor || now > parseInt(ignoreUntilMajor, 10)) {
                        const ignoreMsMajor = getIgnoreMs(IGNORE_DURATION_MAJOR);
                        if (confirm(`‚ùóIt's been ${diffDays} day(s) since a major update was released for ${EXTENSION_NAME}‚ùó\n\n ‚ö†Ô∏è Please update for continued support ‚ö†Ô∏è \n\n Press OK to go to update page, or Cancel to ignore for ${IGNORE_DURATION_MAJOR.weeks ? IGNORE_DURATION_MAJOR.weeks + ' week(s) ' : ''}${IGNORE_DURATION_MAJOR.days ? IGNORE_DURATION_MAJOR.days + ' day(s) ' : ''}${IGNORE_DURATION_MAJOR.hours ? IGNORE_DURATION_MAJOR.hours + ' hour(s) ' : ''}${IGNORE_DURATION_MAJOR.minutes ? IGNORE_DURATION_MAJOR.minutes + ' minute(s)' : ''}. \n\n Note: You can always check your version by clicking the extension icon.`)) {
                            window.location.href = EXTENSION_URL;
                        } else {
                            localStorage.setItem(ignoreKeyMajor, (now + ignoreMsMajor).toString());
                        }
                    }
                }
                // Minor update (e.g. x.1)
                else if (
                    (currentParts[0] === latestParts[0]) &&
                    (currentParts[1] < latestParts[1])
                ) {
                    if (!ignoreUntilMinor || now > parseInt(ignoreUntilMinor, 10)) {
                        const ignoreMsMinor = getIgnoreMs(IGNORE_DURATION_MINOR);
                        if (confirm(`‚ÑπÔ∏è A minor update (${latestVersion}) is available for ${EXTENSION_NAME}. \n\n Release notes: \n${releaseNotes} \n\n Press OK to go to update page, or Cancel to ignore for ${IGNORE_DURATION_MINOR.weeks ? IGNORE_DURATION_MINOR.weeks + ' week(s) ' : ''}${IGNORE_DURATION_MINOR.days ? IGNORE_DURATION_MINOR.days + ' day(s) ' : ''}${IGNORE_DURATION_MINOR.hours ? IGNORE_DURATION_MINOR.hours + ' hour(s) ' : ''}${IGNORE_DURATION_MINOR.minutes ? IGNORE_DURATION_MINOR.minutes + ' minute(s)' : ''}.`)) {
                            window.location.href = EXTENSION_URL;
                        } else {
                            localStorage.setItem(ignoreKeyMinor, (now + ignoreMsMinor).toString());
                        }
                    }
                }
            } else if (cmp > 0) {
                // Current version is higher than latest
                alert(`üî® You are using a beta version of ${EXTENSION_NAME}. Expect bugs and instability. Please report any issues on GitHub. \n\n IF YOU ARE NOT USING A BETA, IT IS A CACHE ISSUE. IGNORE THIS MESSAGE AND IT WILL GO AWAY WITHIN A FEW MINUTES`);
            }
            // If cmp === 0, do nothing (up to date)
        })
        .catch(() => {
            // Fail silently if unable to fetch version
        });
});
